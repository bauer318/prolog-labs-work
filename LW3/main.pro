% Copyright
/*Лаба 01*/
implement main
    open core, console
/*Типы данных*/
domains
    код_кт=integer.
    название=string.
    адрес=string.
    телефон=string.
    кол_во_мест=integer.
    код_кф=integer.
    год_выпуска=integer.
    режиссер=string.
    число_серий=integer.
    дата=string.
    время=integer.
    выручка=integer.
class facts
    кинотеатр:(код_кт,название,адрес,телефон,кол_во_мест).
    кинофильм:(код_кф,название,год_выпуска,режиссер,число_серий).
    показывает:(код_кт,код_кф,дата,время,выручка).
    кинотеатры_позывающие:(код_кт).
    фильмы_определенного_кинотеатра:(код_кф,выручка) nondeterm.
    id_фильмы_определенного_кинотеатра:(код_кф) nondeterm.
    филмь_одного_ID_одного_кинотеатра:(выручка)determ.
    большое_число_серий:(число_серий) determ.


/*Определение отношениий с помощью фактов*/
clauses
    /*Определение отношения <кинотеатр>(<код_кт>,<название>,
                            <адрес>,<телефон>,<кол_во_мест>)*/
    кинотеатр(1,"кинотеатр 1","Гагарина дом 63/29","999-000-854",50).
    кинотеатр(2,"кинотеатр 2","4я линия дом 27","999-111-245",100).
    кинотеатр(3,"кинотеатр 3","Татарская дом 68","999-245-854",125).
    кинотеатр(4,"кинотеатр 4","Виктория дом 104","995-745-854",11).
    /*Определение отношения <кинофильм>(<код_кф>,
                            <название>,<год_выпуска>,<режиссер>,<число_серий>)*/
    кинофильм(1,"Nikita",1997,"Joel Surnow",96).
    кинофильм(2,"Scorpion",2014,"Nick Santora",91).
    кинофильм(3,"The Blacklist",2013,"Jon Bokenkamp",196).
    кинофильм(4,"24 chrono",2001,"Joel Surnow",204).
    кинофильм(5,"Designed Survivor",2016,"David Guggenheim",53).
    кинофильм(6,"Game of thrones",2011,"David Friedman",73).
    кинофильм(7,"Breaking Bad",2013," Vince Gilligan",62).
    /*Определение отношения <показывает>(<код_кт>,<код_кф>,
                            <дата>,<время>,<выручка>)*/
    показывает(1,4,"17.01.2023",20,2780).
    показывает(2,4,"17.01.2023",21,1764).
    показывает(1,2,"20.02.2023",16,5745).
    показывает(4,3,"18.01.2023",15,2780).
    показывает(1,6,"18.01.2023",20,8754).
    показывает(2,6,"21.01.2023",17,2478).
    показывает(4,1,"19.02.2023",19,4578).
    показывает(1,6,"20.01.2023",20,5000).

class predicates
    запись_кинотеатр_показывающие:(код_кт) procedure.
    вывод_кинофильм_по_кинотеатру:(код_кт) procedure.
    вывод_название_кинотеатра_по_ID:(код_кт) nondeterm (i).
    запись_фильмов_определенного_кинотеатра:(код_кт)procedure.
    вычислить_общую_выручку:(код_кф) procedure.
    вывод_общей_выручки_по_фильму_определенного_кинотеатра:() procedure.
    запись_ID_фильмов_одного_кинотеатра:(код_кф) procedure.
    вывод_название_фильма_по_ID:(код_кф) nondeterm (i).
    наибольшее:(число_серий,число_серий,число_серий) nondeterm (i,i,o).
    запись_большего_числа_серий:()procedure.
    вывод_фильм_с_наибольшим_числом_серий:(число_серий) procedure.


clauses
/*Определение отношений с помощью правил*/

        вывод_название_кинотеатра_по_ID(IDKT):-кинотеатр(IDKT,NAME,_,_,_),write("Филмы, идущие в ",NAME,": "),nl.

        запись_кинотеатр_показывающие(IDKT):-кинотеатры_позывающие(IDKT),!.
        запись_кинотеатр_показывающие(IDKT):-assert(кинотеатры_позывающие(IDKT)).

        вывод_кинофильм_по_кинотеатру(IDKT):-вывод_название_кинотеатра_по_ID(IDKT),
                                                                  показывает(IDKT,IDKF,_,_,_),
                                                                  кинофильм(IDKF,FILM,_,_,_),write(FILM),nl,fail.
        вывод_кинофильм_по_кинотеатру(_).

        запись_ID_фильмов_одного_кинотеатра(IDKF):-id_фильмы_определенного_кинотеатра(IDKF),!.
        запись_ID_фильмов_одного_кинотеатра(IDKF):-assert(id_фильмы_определенного_кинотеатра(IDKF)).

        запись_фильмов_определенного_кинотеатра(IDKT):-показывает(IDKT,IDKF,_,_,REC),
                                                                                 assert(фильмы_определенного_кинотеатра(IDKF,REC)),
                                                                                 запись_ID_фильмов_одного_кинотеатра(IDKF),
                                                                                 fail.
        запись_фильмов_определенного_кинотеатра(_).


        вывод_название_фильма_по_ID(IDKF):-кинофильм(IDKF,Film,_,_,_),write("Общая выручка фильма ",Film).

        вычислить_общую_выручку(IDKF):- assert(филмь_одного_ID_одного_кинотеатра(0)),
                                                                /*Le debut du cycle - parcours tous les IDKF*/
                                                                фильмы_определенного_кинотеатра(IDKF,REC1),
                                                                /*Retire la somme et ajoute REC2 qui vaut 0 au premier cycle
                                                                IDKF et la valeur REC_TOT aux autres suivants*/
                                                                retract(филмь_одного_ID_одного_кинотеатра(REC2)),
                                                                REC_TOT = REC1 + REC2,
                                                                asserta(филмь_одного_ID_одного_кинотеатра(REC_TOT)),
                                                                /*Recommence avec le meme IDKF mais un autre REC1*/
                                                                fail.
        вычислить_общую_выручку(_).

        вывод_общей_выручки_по_фильму_определенного_кинотеатра():-id_фильмы_определенного_кинотеатра(IDKF),
                                                                                                    вычислить_общую_выручку(IDKF),
                                                                                                    филмь_одного_ID_одного_кинотеатра(Out_Rec),
                                                                                                    вывод_название_фильма_по_ID(IDKF),
                                                                                                    write(" : ", Out_Rec),nl,
                                                                                                    /*Reset филмь_одного_ID_одного_кинотеатра pour inserer le suivant*/
                                                                                                    retract(филмь_одного_ID_одного_кинотеатра(_)),
                                                                                                    fail.
        вывод_общей_выручки_по_фильму_определенного_кинотеатра().

        наибольшее(X,Y,X):-X>Y.
        наибольшее(X,Y,Y):-X<=Y.

        запись_большего_числа_серий():-assert(большое_число_серий(0)),
                                                        кинофильм(_,_,_,_,Episode),
                                                        retract(большое_число_серий(Episode_Retracted)),
                                                        наибольшее(Episode,Episode_Retracted,Max),
                                                        asserta(большое_число_серий(Max)),
                                                        fail.
        запись_большего_числа_серий().

        вывод_фильм_с_наибольшим_числом_серий(Episode):-кинофильм(_,Film,_,_,Episode),write(Film),nl,fail.
        вывод_фильм_с_наибольшим_числом_серий(_).

clauses
    run():-показывает(IDKT,_,_,_,_),запись_кинотеатр_показывающие(IDKT),fail.
    run():-кинотеатры_позывающие(IDKT),вывод_кинофильм_по_кинотеатру(IDKT),nl,fail.
    run():-запись_фильмов_определенного_кинотеатра(1),write("кинотеатр 1"),nl,fail.
    run():-вывод_общей_выручки_по_фильму_определенного_кинотеатра(),fail.
    run():-запись_большего_числа_серий(),fail.
    run():-nl,write("Филм с наибольшим количеством числом серий :"),nl,fail.
    run():-большое_число_серий(M),вывод_фильм_с_наибольшим_числом_серий(M),nl,fail.
    run().

end implement main

goal
    console::runUtf8(main::run).